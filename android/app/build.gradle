plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Look for key.properties in the app directory first, then fall back to root
def keystoreProperties = new Properties()
def keystorePropertiesFile = file('key.properties')
if (!keystorePropertiesFile.exists()) {
    keystorePropertiesFile = rootProject.file('key.properties')
}

println "=== Gradle build script debugging ==="
println "Looking for keystore properties file at: ${keystorePropertiesFile.absolutePath}"
println "Keystore properties file exists: ${keystorePropertiesFile.exists()}"

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    println "Loaded keystore properties:"
    keystoreProperties.each { key, value ->
        // Don't print passwords
        if (!key.contains("Password")) {
            println "  ${key}: ${value}"
        } else {
            println "  ${key}: *****"
        }
    }
} else {
    println "No keystore properties file found, will use debug signing"
}

android {
    namespace = "com.barmaglote.familytasks"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    signingConfigs {
        release {
            println "=== Configuring release signing ==="
            if (keystorePropertiesFile.exists() && keystoreProperties.containsKey('storeFile')) {
                println "Using release signing configuration"
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                // Handle both relative and absolute paths for storeFile
                def storeFilePath = keystoreProperties['storeFile']
                println "Store file path from properties: ${storeFilePath}"
                if (storeFilePath.startsWith('/')) {
                    storeFile file(storeFilePath)
                    println "Using absolute path for store file"
                } else {
                    // Assume relative path is from the app directory
                    storeFile file(storeFilePath)
                    println "Using relative path for store file: ${file(storeFilePath).absolutePath}"
                }
                storePassword keystoreProperties['storePassword']
                
                // Verify the store file exists
                def resolvedStoreFile = storeFile
                println "Resolved store file path: ${resolvedStoreFile.absolutePath}"
                println "Store file exists: ${resolvedStoreFile.exists()}"
            } else {
                println "Using debug signing configuration as fallback"
                // Fallback to debug signing if keystore is not properly configured
                keyAlias 'androiddebugkey'
                keyPassword 'android'
                storeFile file(System.getProperty('user.home') + '/.android/debug.keystore')
                storePassword 'android'
                
                // Verify the debug store file exists
                def resolvedStoreFile = storeFile
                println "Debug store file path: ${resolvedStoreFile.absolutePath}"
                println "Debug store file exists: ${resolvedStoreFile.exists()}"
            }
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.barmaglote.familytasks"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            println "=== Configuring release build type ==="
            minifyEnabled true
            shrinkResources true
            // Always use release signing config for release builds
            signingConfig signingConfigs.release
            println "Release signing config assigned"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}